apply plugin:'base'

buildscript {
	repositories {
		jcenter()
	}

	dependencies {
		classpath "com.jaredsburrows:gradle-license-plugin:0.8.42"
		classpath "com.github.ben-manes:gradle-versions-plugin:0.21.0"
		classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1"
	}
}

apply plugin: "com.github.ben-manes.versions"

allprojects {
	version = '1.4.1'

	repositories {
		jcenter()
		mavenCentral()
		maven { url 'https://jitpack.io' }
	}

	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'org.sonarqube'
	apply plugin: 'jacoco'

}

subprojects {
	apply plugin: 'java'
	sourceCompatibility = 12
	targetCompatibility = 12
	compileJava.options.encoding = 'UTF-8'

	sourceSets {
		main {
			java {
				srcDirs = ['src/main/java']
			}
			resources {
				srcDirs = ['src/main/resources', "./../BlockMap-internal/build/generated-resources/${project.name}/generated-resources-main"]
			}
		}
	}

	def jacocoExecutionDataFiles = fileTree(buildDir).include("/jacoco/*.exec")
	jacocoTestReport {
		executionData = jacocoExecutionDataFiles
	}
}

project.tasks["sonarqube"].dependsOn "jacocoRootReport"

task jacocoRootReport(type: JacocoReport) {
	group 'verification'
	description = 'Generates an aggregate report from all subprojects'
	reports {
		xml.enabled = true
	}
	additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
	sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
	classDirectories = files(subprojects.sourceSets.main.output)
	executionData = files(subprojects.jacocoTestReport.executionData)
}

task regenerate(type: GradleBuild) {
	group 'Generation'
	description 'Regenerate all resources except screenshots'
    // All other generators are called as transitive dependencies
    tasks = ['BlockMap-internal:generateSources', 'BlockMap-internal:generateData']
}

task beforeCommit(type: GradleBuild) {
	group 'Distribution'
	description 'Call this before each commit to make sure it works'
	tasks = ['clean', 'regenerate', 'test']
}

task initEclipse(type: GradleBuild) {
	group 'IDE'
	tasks = ['regenerate', 'cleanEclipse', 'eclipse']
}

task initIdea(type: GradleBuild) {
	group 'IDE'
	tasks = ['regenerate', 'cleanIdea', 'idea']
}

task release(type: GradleBuild) {
	group 'Distribution'
	description 'Generate a fat jar to publish on GitHub (or to execute) after having run all tests'
	tasks = ['regenerate', 'build', ':BlockMap-standalone:shadowJar']
}

clean {
	delete 'screenshots'
}
